// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace IMDB.Test.Feature
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ReviewResourceFeature : object, Xunit.IClassFixture<ReviewResourceFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Review.feature"
#line hidden
        
        public ReviewResourceFeature(ReviewResourceFeature.FixtureData fixtureData, IMDB_Test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Feature", "Review Resource", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Review All")]
        [Xunit.TraitAttribute("FeatureTitle", "Review Resource")]
        [Xunit.TraitAttribute("Description", "Get Review All")]
        [Xunit.TraitAttribute("Category", "GetReviewAll")]
        public void GetReviewAll()
        {
            string[] tagsOfScenario = new string[] {
                    "GetReviewAll"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Review All", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.When("I make GET Request \'/movies/1/reviews\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
 testRunner.Then("response code must be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 8
 testRunner.And("response data must look like \'[{\"id\":1,\"message\":\"Message 1\",\"movieId\":1}]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get Review By Id")]
        [Xunit.TraitAttribute("FeatureTitle", "Review Resource")]
        [Xunit.TraitAttribute("Description", "Get Review By Id")]
        [Xunit.TraitAttribute("Category", "GetReviewById")]
        [Xunit.InlineDataAttribute("/movies/1/reviews/1", "200", "{\"id\":1,\"message\":\"Message 1\",\"movieId\":1}", new string[0])]
        [Xunit.InlineDataAttribute("/movies/0/reviews/1", "400", "Invalid MovieId", new string[0])]
        [Xunit.InlineDataAttribute("/movies/1/reviews/0", "400", "Invalid ReviewId", new string[0])]
        [Xunit.InlineDataAttribute("/movies/1/reviews/4", "404", "Review 4 for MovieId 1 is Null (Parameter \'Id\')", new string[0])]
        public void GetReviewById(string endpoint, string statusCode, string response, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GetReviewById"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Endpoint", endpoint);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Review By Id", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 12
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
 testRunner.When(string.Format("I make GET Request \'{0}\'", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
 testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.And(string.Format("response data must look like \'{0}\'", response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Post Review")]
        [Xunit.TraitAttribute("FeatureTitle", "Review Resource")]
        [Xunit.TraitAttribute("Description", "Post Review")]
        [Xunit.TraitAttribute("Category", "PostReview")]
        [Xunit.InlineDataAttribute("/movies/1/reviews", "{\"message\":\"Message 1\",\"movieId\":1}", "201", "3", new string[0])]
        [Xunit.InlineDataAttribute("/movies/1/reviews", "{\"message\":\"\",\"movieId\":1}", "400", "Invalid arguments in Review Message", new string[0])]
        [Xunit.InlineDataAttribute("/movies/1/reviews", "{\"message\":\"Message 1\",\"movieId\":0}", "400", "Invalid MovieId", new string[0])]
        [Xunit.InlineDataAttribute("/movies/4/reviews", "{\"message\":\"Message 1\",\"movieId\":1}", "404", "MovieId 4 is Null (Parameter \'MovieId\')", new string[0])]
        public void PostReview(string endpoint, string inputData, string statusCode, string response, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PostReview"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Endpoint", endpoint);
            argumentsOfScenario.Add("Input Data", inputData);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Review", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 27
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 28
 testRunner.When(string.Format("I am making a post request to \'{0}\' with the following Data \'{1}\'", endpoint, inputData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
 testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
 testRunner.And(string.Format("response data must look like \'{0}\'", response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Put Review")]
        [Xunit.TraitAttribute("FeatureTitle", "Review Resource")]
        [Xunit.TraitAttribute("Description", "Put Review")]
        [Xunit.TraitAttribute("Category", "PutReview")]
        [Xunit.InlineDataAttribute("/movies/1/reviews/1", "{\"message\":\"Message 1\",\"movieId\":1}", "200", "", new string[0])]
        [Xunit.InlineDataAttribute("/movies/0/reviews/1", "{\"message\":\"Message 1\",\"movieId\":1}", "400", "Invalid MovieId", new string[0])]
        [Xunit.InlineDataAttribute("/movies/1/reviews/0", "{\"message\":\"Message 1\",\"movieId\":1}", "400", "Invalid ReviewId", new string[0])]
        [Xunit.InlineDataAttribute("/movies/1/reviews/1", "{\"message\":\"\",\"movieId\":1}", "400", "Invalid arguments in Review Message", new string[0])]
        [Xunit.InlineDataAttribute("/movies/1/reviews/1", "{\"message\":\"Message 1\",\"movieId\":0}", "400", "Invalid MovieId", new string[0])]
        [Xunit.InlineDataAttribute("/movies/1/reviews/4", "{\"message\":\"Message 1\",\"movieId\":1}", "404", "Review 4 for MovieId 1 is Null (Parameter \'Id\')", new string[0])]
        public void PutReview(string endpoint, string inputData, string statusCode, string response, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PutReview"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Endpoint", endpoint);
            argumentsOfScenario.Add("Input Data", inputData);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Put Review", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 41
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 42
 testRunner.When(string.Format("I make PUT Request \'{0}\' with the following Data with the following Data \'{1}\'", endpoint, inputData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Delete Review")]
        [Xunit.TraitAttribute("FeatureTitle", "Review Resource")]
        [Xunit.TraitAttribute("Description", "Delete Review")]
        [Xunit.TraitAttribute("Category", "DeleteReview")]
        [Xunit.InlineDataAttribute("/movies/1/reviews/1", "200", "", new string[0])]
        [Xunit.InlineDataAttribute("/movies/0/reviews/1", "400", "Invalid MovieId", new string[0])]
        [Xunit.InlineDataAttribute("/movies/1/reviews/0", "400", "Invalid ReviewId", new string[0])]
        [Xunit.InlineDataAttribute("/movies/1/reviews/4", "404", "Review 4 for MovieId 1 is Null (Parameter \'Id\')", new string[0])]
        public void DeleteReview(string endpoint, string statusCode, string response, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "DeleteReview"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Endpoint", endpoint);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Review", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 57
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 58
 testRunner.When(string.Format("I make Delete Request \'{0}\'", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
 testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 60
 testRunner.And(string.Format("response data must look like \'{0}\'", response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ReviewResourceFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ReviewResourceFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
