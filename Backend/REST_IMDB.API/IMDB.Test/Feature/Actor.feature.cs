// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace IMDB.Test.Feature
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ActorResourceFeature : object, Xunit.IClassFixture<ActorResourceFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Actor.feature"
#line hidden
        
        public ActorResourceFeature(ActorResourceFeature.FixtureData fixtureData, IMDB_Test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Feature", "Actor Resource", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Actor All")]
        [Xunit.TraitAttribute("FeatureTitle", "Actor Resource")]
        [Xunit.TraitAttribute("Description", "Get Actor All")]
        [Xunit.TraitAttribute("Category", "GetActorAll")]
        public void GetActorAll()
        {
            string[] tagsOfScenario = new string[] {
                    "GetActorAll"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Actor All", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.When("I make GET Request \'/actors\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
 testRunner.Then("response code must be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 8
 testRunner.And("response data must look like \'[{\"id\":1,\"name\":\"Actor 1\",\"bio\":\"--\",\"dob\":\"1990-04" +
                        "-01T00:00:00\",\"gender\":\"Male\",\"image\":\"\"},{\"id\":2,\"name\":\"Actor \",\"bio\":\"--\",\"do" +
                        "b\":\"1997-04-02T00:00:00\",\"gender\":\"Female\",\"image\":\"\"}]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get Actor By Id")]
        [Xunit.TraitAttribute("FeatureTitle", "Actor Resource")]
        [Xunit.TraitAttribute("Description", "Get Actor By Id")]
        [Xunit.TraitAttribute("Category", "GetActorById")]
        [Xunit.InlineDataAttribute("/actors/1", "200", "{\"id\":1,\"name\":\"Actor 1\",\"bio\":\"--\",\"dob\":\"1990-04-01T00:00:00\",\"gender\":\"Male\",\"" +
            "image\":\"\"}", new string[0])]
        [Xunit.InlineDataAttribute("/actors/0", "400", "Invalid Id", new string[0])]
        [Xunit.InlineDataAttribute("/actors/4", "404", "Actor 4 is Null (Parameter \'Id\')", new string[0])]
        public void GetActorById(string endpoint, string statusCode, string response, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GetActorById"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Endpoint", endpoint);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Actor By Id", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 12
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 13
 testRunner.When(string.Format("I make GET Request \'{0}\'", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
 testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.And(string.Format("response data must look like \'{0}\'", response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Post Actor")]
        [Xunit.TraitAttribute("FeatureTitle", "Actor Resource")]
        [Xunit.TraitAttribute("Description", "Post Actor")]
        [Xunit.TraitAttribute("Category", "PostActor")]
        [Xunit.InlineDataAttribute("/actors", "{\"name\":\"Actor 1\",\"bio\":\"--\",\"dob\":\"1990-04-01T00:00:00\",\"gender\":\"Male\"}", "201", "3", new string[0])]
        [Xunit.InlineDataAttribute("/actors", "{\"name\":\"\",\"bio\":\"--\",\"dob\":\"1990-04-01T00:00:00\",\"gender\":\"Male\"}", "400", "Invalid arguments in Actor Name", new string[0])]
        [Xunit.InlineDataAttribute("/actors", "{\"name\":\"Actor 1\",\"bio\":\"\",\"dob\":\"1990-04-01T00:00:00\",\"gender\":\"Male\"}", "400", "Invalid arguments in Actor Bio", new string[0])]
        [Xunit.InlineDataAttribute("/actors", "{\"name\":\"Actor 1\",\"bio\":\"--\",\"dob\":\"2025-04-01T00:00:00\",\"gender\":\"Male\"}", "400", "Invalid arguments in Actor DOB", new string[0])]
        [Xunit.InlineDataAttribute("/actors", "{\"name\":\"Actor 1\",\"bio\":\"--\",\"dob\":\"1990-04-01T00:00:00\",\"gender\":\"\"}", "400", "Invalid arguments in Actor Gender", new string[0])]
        public void PostActor(string endpoint, string inputData, string statusCode, string response, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PostActor"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Endpoint", endpoint);
            argumentsOfScenario.Add("Input Data", inputData);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Actor", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 25
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 26
 testRunner.When(string.Format("I am making a post request to \'{0}\' with the following Data \'{1}\'", endpoint, inputData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
 testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
 testRunner.And(string.Format("response data must look like \'{0}\'", response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Put Actor")]
        [Xunit.TraitAttribute("FeatureTitle", "Actor Resource")]
        [Xunit.TraitAttribute("Description", "Put Actor")]
        [Xunit.TraitAttribute("Category", "PutActor")]
        [Xunit.InlineDataAttribute("/actors/1", "{\"name\":\"Actor update 1\",\"bio\":\"--\",\"dob\":\"1990-04-01T00:00:00\",\"gender\":\"Male\"}", "200", "", new string[0])]
        [Xunit.InlineDataAttribute("/actors/0", "{\"name\":\"Actor update 1\",\"bio\":\"--\",\"dob\":\"1990-04-01T00:00:00\",\"gender\":\"Male\"}", "400", "Invalid Id", new string[0])]
        [Xunit.InlineDataAttribute("/actors/1", "{\"name\":\"\",\"bio\":\"--\",\"dob\":\"1990-04-01T00:00:00\",\"gender\":\"Male\"}", "400", "Invalid arguments in Actor Name", new string[0])]
        [Xunit.InlineDataAttribute("/actors/1", "{\"name\":\"Actor 1\",\"bio\":\"\",\"dob\":\"1990-04-01T00:00:00\",\"gender\":\"Male\"}", "400", "Invalid arguments in Actor Bio", new string[0])]
        [Xunit.InlineDataAttribute("/actors/1", "{\"name\":\"Actor 1\",\"bio\":\"--\",\"dob\":\"2025-04-01T00:00:00\",\"gender\":\"Male\"}", "400", "Invalid arguments in Actor DOB", new string[0])]
        [Xunit.InlineDataAttribute("/actors/1", "{\"name\":\"Actor 1\",\"bio\":\"--\",\"dob\":\"1990-04-01T00:00:00\",\"gender\":\"\"}", "400", "Invalid arguments in Actor Gender", new string[0])]
        [Xunit.InlineDataAttribute("/actors/4", "{\"name\":\"Actor 1\",\"bio\":\"--\",\"dob\":\"1990-04-01T00:00:00\",\"gender\":\"Male\"}", "404", "Actor 4 is Null (Parameter \'Id\')", new string[0])]
        public void PutActor(string endpoint, string inputData, string statusCode, string response, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "PutActor"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Endpoint", endpoint);
            argumentsOfScenario.Add("Input Data", inputData);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Put Actor", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 40
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
 testRunner.When(string.Format("I make PUT Request \'{0}\' with the following Data with the following Data \'{1}\'", endpoint, inputData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 43
 testRunner.And(string.Format("response data must look like \'{0}\'", response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Delete Actor")]
        [Xunit.TraitAttribute("FeatureTitle", "Actor Resource")]
        [Xunit.TraitAttribute("Description", "Delete Actor")]
        [Xunit.TraitAttribute("Category", "DeleteActor")]
        [Xunit.InlineDataAttribute("/actors/1", "200", "", new string[0])]
        [Xunit.InlineDataAttribute("/actors/0", "400", "Invalid Id", new string[0])]
        [Xunit.InlineDataAttribute("/actors/4", "404", "Actor 4 is Null (Parameter \'Id\')", new string[0])]
        public void DeleteActor(string endpoint, string statusCode, string response, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "DeleteActor"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Endpoint", endpoint);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("Response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Actor", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 57
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 58
 testRunner.When(string.Format("I make Delete Request \'{0}\'", endpoint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
 testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 60
 testRunner.And(string.Format("response data must look like \'{0}\'", response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ActorResourceFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ActorResourceFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
